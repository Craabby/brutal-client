{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../src/packets/clientbound/update.ts"],"names":[],"mappings":"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","sourcesContent":["import ParsedClientboundPacket from \"../../interfaces/parsedClientboundPacket\"\nimport { Reader } from \"../../coder\"\nimport DeadPlayerCell from \"./updatePacket/deadPlayerCell\"\nimport GreenSentinel from \"./updatePacket/greenSentinel\"\nimport MapObject1 from \"./updatePacket/mapObject1\"\nimport MapObject2 from \"./updatePacket/mapObject2\"\nimport NaturallySpawnedEnergy from \"./updatePacket/naturallySpawnedEnergy\"\nimport Player from \"./updatePacket/otherPlayer\"\nimport RedFlail from \"./updatePacket/redFlail\"\n\nfunction parseUpdatePacket(data: Buffer, bot: any): ParsedClientboundPacket {\n  bot.lag = Date.now() - bot._lastUpdatePacket\n  bot._lastUpdatePacket = Date.now()\n  const packet: Reader = new Reader(data)\n\n  packet.offset = 1\n\n  while (true) {\n    const currentId = packet.u16()\n\n    if (currentId === 0) {\n      if (packet.offset !== data.byteLength) {\n        const kingId = packet.u16()\n\n        if (kingId !== 0) {\n          const kingX = packet.f32()\n          const kingY = packet.f32()\n        }\n      }\n\n      break\n    }\n\n    const type = packet.u8()\n\n    if (type === 0) {\n      const entity = bot.entities[currentId]\n      if (entity) entity.updateNetwork(packet, false)\n      else {\n        throw new Error(\n          `Tried to update a nonexistant entity. Id: ${currentId} at ${packet.offset}`\n        )\n      }\n    } else if (type === 1) {\n      const entityType = packet.u8()\n      const entitySubtype = packet.u8()\n      const entityName = packet.string()\n\n      let entity: null | any = null\n\n      if (entityType === 5) entity = new Player()\n      else if (entityType === 4) {\n        if (entitySubtype === 0) entity = new NaturallySpawnedEnergy()\n        else if (entitySubtype === 1) entity = new DeadPlayerCell()\n        else if (entitySubtype === 4) entity = new RedFlail()\n        else if (entitySubtype === 2 || entitySubtype === 3) {\n          entity = new GreenSentinel(entitySubtype)\n        }\n      } else if (entityType === 1) {\n        if (entitySubtype === 3) entity = new MapObject1()\n        else entity = new MapObject2(entitySubtype)\n      }\n\n      if (!entity)\n        throw new Error(\n          `Failed to create entityType ${entityType} subtype ${entitySubtype}`\n        )\n\n      entity.name = entityName\n      entity.id = currentId\n\n      entity.updateNetwork(packet, true)\n      bot.entities[currentId] = entity\n\n    } else if (type === 2) {\n      let e = packet.u16()\n      let g = packet.u8()\n\n      const entity: undefined | any = bot.entities[currentId]\n\n      if (!entity) {\n        throw new Error(`tried to delete entity that doesnt exist ${currentId}`)\n      }\n\n      entity.killedById = e\n      entity.killReason = g\n\n      entity.deleteNetwork(packet)\n\n      delete bot.entities[currentId]\n    }\n  }\n\n  return { type: \"update\", data: bot.entities }\n}\n\nexport default parseUpdatePacket\nmodule.exports = parseUpdatePacket\n"]}