{"version":3,"file":"update.js","sourceRoot":"","sources":["../../../../src/packets/clientbound/update.ts"],"names":[],"mappings":"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","sourcesContent":["import ParsedClientboundPacket from \"../../interfaces/parsedClientboundPacket\";\nimport { Reader } from \"../../coder\";\nimport DeadPlayerCell from \"./updatePacket/deadPlayerCell\";\nimport GreenSentinel from \"./updatePacket/greenSentinel\";\nimport MapObject1 from \"./updatePacket/mapObject1\";\nimport MapObject2 from \"./updatePacket/mapObject2\";\nimport NaturallySpawnedEnergy from \"./updatePacket/naturallySpawnedEnergy\";\nimport Player from \"./updatePacket/otherPlayer\";\nimport RedFlail from \"./updatePacket/redFlail\";\n\nfunction parseUpdatePacket(data: Buffer, bot: any): ParsedClientboundPacket {\n  bot.lag = Date.now() - bot._lastUpdatePacket;\n  bot._lastUpdatePacket = Date.now();\n  const packet: Reader = new Reader(data);\n\n  packet.offset = 1;\n\n  while (true) {\n    const currentId = packet.u16();\n\n    if (currentId === 0) {\n      if (packet.offset !== data.byteLength) {\n        const kingId = packet.u16();\n\n        if (kingId !== 0) {\n          const kingX = packet.f32();\n          const kingY = packet.f32();\n        }\n      }\n\n      break;\n    }\n\n    const type = packet.u8();\n\n    if (type === 0) {\n      const entity = bot.entities[currentId];\n      if (entity) entity.updateNetwork(packet, false);\n      else {\n        throw new Error(\n          `Tried to update a nonexistant entity. Id: ${currentId} at ${packet.offset}`\n        );\n      }\n    } else if (type === 1) {\n      const entityType = packet.u8();\n      const entitySubtype = packet.u8();\n      const entityName = packet.string();\n\n      let entity: null | any = null;\n\n      if (entityType === 5) entity = new Player();\n      else if (entityType === 4) {\n        if (entitySubtype === 0) entity = new NaturallySpawnedEnergy();\n        else if (entitySubtype === 1) entity = new DeadPlayerCell();\n        else if (entitySubtype === 4) entity = new RedFlail();\n        else if (entitySubtype === 2 || entitySubtype === 3) {\n          entity = new GreenSentinel(entitySubtype);\n        }\n      } else if (entityType === 1) {\n        if (entitySubtype === 3) entity = new MapObject1();\n        else entity = new MapObject2(entitySubtype);\n      }\n\n      if (!entity)\n        throw new Error(\n          `Failed to create entityType ${entityType} subtype ${entitySubtype}`\n        );\n\n      entity.name = entityName;\n      entity.id = currentId;\n\n      entity.updateNetwork(packet, true);\n      bot.entities[currentId] = entity;\n    } else if (type === 2) {\n      let e = packet.u16();\n      let g = packet.u8();\n\n      const entity: undefined | any = bot.entities[currentId];\n\n      if (!entity) {\n        throw new Error(\n          `tried to delete entity that doesnt exist ${currentId}`\n        );\n      }\n\n      entity.killedById = e;\n      entity.killReason = g;\n\n      entity.deleteNetwork(packet);\n\n      delete bot.entities[currentId];\n    }\n  }\n\n  return { type: \"update\", data: bot.entities };\n}\n\nexport default parseUpdatePacket;\nmodule.exports = parseUpdatePacket;\n"]}