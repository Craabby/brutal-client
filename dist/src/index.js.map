{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { encode, decode } from \"./packets\"\nimport ParsedClientboundPacket from \"./interfaces/parsedClientboundPacket\"\nimport Vector from \"./vector\"\nimport * as WebSocket from \"ws\"\nimport * as url from \"url\"\n\nconst HttpsProxyAgent = require(\"https-proxy-agent\")\nconst EventEmitter = require(\"events\")\n\nclass BrutalSocket extends EventEmitter {\n  public static Vector: any = Vector // im not sure what the `any` should be. when it is Vector, i get compiler errors\n  public entities: any;\n  public socket: WebSocket\n  public server: string\n  public _lastUpdatePacket: number\n  public lag: number;\n\n  constructor(server: string, options?: any) {\n    super()\n    this.server = server\n    this.entities = {};\n\n    if (options == null) options = {}\n\n    if (options.proxy) {\n      options.agent = new HttpsProxyAgent(url.parse(`http://${options.proxy}`))\n    }\n\n    const _options: object = {\n      origin: \"http://brutal.io\",\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.114 Safari/537.36\",\n      },\n      ...options,\n    }\n    this.socket = new WebSocket(server, _options)\n    this._init()\n\n    this.lag = 0;\n    this._lastUpdatePacket = Date.now();\n  }\n\n  private _init() {\n    this.socket.on(\"open\", () => this._onopen())\n    this.socket.on(\"close\", (code: number) => this._onclose(code))\n    this.socket.on(\"error\", (err: Error) => this._onerr(err))\n    this.socket.on(\"message\", (msg: Buffer, isBinary: boolean) => {\n      this._onmessage(msg, isBinary)\n    })\n  }\n\n  private _onmessage(msg: Buffer, isBinary: boolean): void {\n    const parsed: ParsedClientboundPacket = decode(msg, this)\n    this.emit(\"message\", parsed)\n  }\n\n  private _onerr(err: Error): void {\n    this.emit(\"error\", err)\n  }\n\n  private _onclose(code: number): void {\n    this.emit(\"close\", code)\n  }\n\n  private _onopen(): void {\n    this.emit(\"open\")\n    this.send(\"ping\")\n    this.send(\"init\")\n  }\n\n  public send(type: string, data?: any): void {\n    if (this.socket.readyState == WebSocket.OPEN) {\n      this.socket.send(encode(type, data, this))\n    }\n  }\n\n  public spawn(name: string): void {\n    this.send(\"spawn\", name)\n  }\n}\n\nexport default BrutalSocket\n"]}